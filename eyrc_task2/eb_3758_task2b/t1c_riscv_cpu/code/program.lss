
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
000002cf l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000003b4 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
000002cf  w      .debug_info	00000000 .hidden path_planner.c.c3c0fb22
00000000 g       *ABS*	00000000 __tbss_size
000003ac g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000003f4 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000003d8 g     F .text	0000001c memset
00000054 g     F .text	00000358 main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000003f8 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    3f800593          	addi	x11,x0,1016
  1c:	    00000613          	addi	x12,x0,0
  20:	    394000ef          	jal	x1,3b4 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    3a4000ef          	jal	x1,3d8 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    36c000ef          	jal	x1,3ac <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         }
     ###         
     ### }
     ###  
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                               ff010113          	addi	x2,x2,-16
     ###         uint8_t path_planned[32] ;
     ###     #else
     ###         uint8_t *path_planned = (uint8_t *) 0x020000AB;
     ###     #endif
     ### 
     ###     graph[0] = 0x8c1503ff;
  58:	                               8c1507b7          	lui	x15,0x8c150
  5c:	                               02000537          	lui	x10,0x2000
     ### int main(int argc, char const *argv[]) {
  60:	                               00112623          	sw	x1,12(x2)
  64:	                               00812423          	sw	x8,8(x2)
  68:	                               00912223          	sw	x9,4(x2)
     ###     graph[0] = 0x8c1503ff;
  6c:	                               3ff78793          	addi	x15,x15,1023 # 8c1503ff <__global_pointer$+0x8a14fbff>
  70:	                               00f52823          	sw	x15,16(x10) # 2000010 <__bss_end+0x10>
     ###     graph[1] = 0x962003ff;
  74:	                               962007b7          	lui	x15,0x96200
  78:	                               3ff78793          	addi	x15,x15,1023 # 962003ff <__global_pointer$+0x941ffbff>
  7c:	                               00f52a23          	sw	x15,20(x10)
     ###     graph[2] = 0xc23217ff;
  80:	                               c23217b7          	lui	x15,0xc2321
  84:	                               7ff78793          	addi	x15,x15,2047 # c23217ff <__global_pointer$+0xc0320fff>
  88:	                               00f52c23          	sw	x15,24(x10)
     ###     graph[3] = 0x40003ff;
  8c:	                               040007b7          	lui	x15,0x4000
  90:	                               3ff78793          	addi	x15,x15,1023 # 40003ff <__global_pointer$+0x1fffbff>
  94:	                               00f52e23          	sw	x15,28(x10)
     ###     graph[4] = 0x40003ff;
  98:	                               02f52023          	sw	x15,32(x10)
     ###     graph[5] = 0x40003ff;
  9c:	                               02f52223          	sw	x15,36(x10)
     ###     graph[6] = 0xce8483ff;
  a0:	                               ce8487b7          	lui	x15,0xce848
  a4:	                               3ff78793          	addi	x15,x15,1023 # ce8483ff <__global_pointer$+0xcc847bff>
  a8:	                               02f52423          	sw	x15,40(x10)
     ###     graph[7] = 0xc0003ff;
  ac:	                               0c0007b7          	lui	x15,0xc000
  b0:	                               3ff78793          	addi	x15,x15,1023 # c0003ff <__global_pointer$+0x9fffbff>
  b4:	                               02f52623          	sw	x15,44(x10)
     ###     graph[8] = 0xc0003ff;
  b8:	                               02f52823          	sw	x15,48(x10)
     ###     graph[9] = 0xc0003ff;
  bc:	                               02f52a23          	sw	x15,52(x10)
     ###     graph[10] = 0xc0bd63ff;
  c0:	                               c0bd67b7          	lui	x15,0xc0bd6
  c4:	                               3ff78793          	addi	x15,x15,1023 # c0bd63ff <__global_pointer$+0xbebd5bff>
  c8:	                               02f52c23          	sw	x15,56(x10)
     ###     graph[11] = 0xd419b3ff;
  cc:	                               d419b7b7          	lui	x15,0xd419b
  d0:	                               3ff78793          	addi	x15,x15,1023 # d419b3ff <__global_pointer$+0xd219abff>
  d4:	                               02f52e23          	sw	x15,60(x10)
     ###     graph[12] = 0x9ab703ff;
  d8:	                               9ab707b7          	lui	x15,0x9ab70
  dc:	                               3ff78793          	addi	x15,x15,1023 # 9ab703ff <__global_pointer$+0x98b6fbff>
  e0:	                               04f52023          	sw	x15,64(x10)
     ###     graph[13] = 0x180003ff;
  e4:	                               180007b7          	lui	x15,0x18000
  e8:	                               3ff78793          	addi	x15,x15,1023 # 180003ff <__global_pointer$+0x15fffbff>
  ec:	                               04f52223          	sw	x15,68(x10)
     ###     graph[14] = 0x98f803ff;
  f0:	                               98f807b7          	lui	x15,0x98f80
  f4:	                               3ff78793          	addi	x15,x15,1023 # 98f803ff <__global_pointer$+0x96f7fbff>
  f8:	                               04f52423          	sw	x15,72(x10)
     ###     graph[15] = 0x1c0003ff;
  fc:	                               1c0007b7          	lui	x15,0x1c000
 100:	                               3ff78793          	addi	x15,x15,1023 # 1c0003ff <__global_pointer$+0x19fffbff>
 104:	                               04f52623          	sw	x15,76(x10)
     ###     graph[16] = 0x9d1903ff;
 108:	                               9d1907b7          	lui	x15,0x9d190
 10c:	                               3ff78793          	addi	x15,x15,1023 # 9d1903ff <__global_pointer$+0x9b18fbff>
 110:	                               04f52823          	sw	x15,80(x10)
     ###     graph[17] = 0x200003ff;
 114:	                               200007b7          	lui	x15,0x20000
 118:	                               3ff78793          	addi	x15,x15,1023 # 200003ff <__global_pointer$+0x1dfffbff>
 11c:	                               04f52a23          	sw	x15,84(x10)
     ###     graph[18] = 0xa13a83ff;
 120:	                               a13a87b7          	lui	x15,0xa13a8
 124:	                               3ff78793          	addi	x15,x15,1023 # a13a83ff <__global_pointer$+0x9f3a7bff>
 128:	                               04f52c23          	sw	x15,88(x10)
     ###     graph[19] = 0xa54583ff;
 12c:	                               a54587b7          	lui	x15,0xa5458
 130:	                               3ff78793          	addi	x15,x15,1023 # a54583ff <__global_pointer$+0xa3457bff>
 134:	                               04f52e23          	sw	x15,92(x10)
     ###     graph[20] = 0x260003ff;
 138:	                               260007b7          	lui	x15,0x26000
 13c:	                               3ff78793          	addi	x15,x15,1023 # 260003ff <__global_pointer$+0x23fffbff>
 140:	                               06f52023          	sw	x15,96(x10)
     ###     graph[21] = 0xa56b83ff;
 144:	                               a56b87b7          	lui	x15,0xa56b8
 148:	                               3ff78793          	addi	x15,x15,1023 # a56b83ff <__global_pointer$+0xa36b7bff>
 14c:	                               06f52223          	sw	x15,100(x10)
     ###     graph[22] = 0x2a0003ff;
 150:	                               2a0007b7          	lui	x15,0x2a000
 154:	                               3ff78793          	addi	x15,x15,1023 # 2a0003ff <__global_pointer$+0x27fffbff>
 158:	                               06f52423          	sw	x15,104(x10)
     ###     graph[23] = 0xabec03ff;
 15c:	                               abec07b7          	lui	x15,0xabec0
 160:	                               3ff78793          	addi	x15,x15,1023 # abec03ff <__global_pointer$+0xa9ebfbff>
 164:	                               06f52623          	sw	x15,108(x10)
     ###     graph[24] = 0xaf9503ff;
 168:	                               af9507b7          	lui	x15,0xaf950
 16c:	                               3ff78793          	addi	x15,x15,1023 # af9503ff <__global_pointer$+0xad94fbff>
 170:	                               06f52823          	sw	x15,112(x10)
     ###     graph[25] = 0x300003ff;
 174:	                               300007b7          	lui	x15,0x30000
 178:	                               3ff78793          	addi	x15,x15,1023 # 300003ff <__global_pointer$+0x2dfffbff>
 17c:	                               06f52a23          	sw	x15,116(x10)
     ###     graph[26] = 0xb6ae03ff;
 180:	                               b6ae07b7          	lui	x15,0xb6ae0
 184:	                               3ff78793          	addi	x15,x15,1023 # b6ae03ff <__global_pointer$+0xb4adfbff>
 188:	                               06f52c23          	sw	x15,120(x10)
     ###     graph[27] = 0x340003ff;
 18c:	                               340007b7          	lui	x15,0x34000
 190:	                               3ff78793          	addi	x15,x15,1023 # 340003ff <__global_pointer$+0x31fffbff>
 194:	                               06f52e23          	sw	x15,124(x10)
     ###     graph[28] = 0xbbaf03ff;
 198:	                               bbaf07b7          	lui	x15,0xbbaf0
 19c:	                               3ff78793          	addi	x15,x15,1023 # bbaf03ff <__global_pointer$+0xb9aefbff>
 1a0:	                               08f52023          	sw	x15,128(x10)
     ###     graph[29] = 0x380003ff;
 1a4:	                               380007b7          	lui	x15,0x38000
 1a8:	                               3ff78793          	addi	x15,x15,1023 # 380003ff <__global_pointer$+0x35fffbff>
 1ac:	                               08f52223          	sw	x15,132(x10)
     ###     graph[30] = 0xb9fb83ff;
 1b0:	                               b9fb87b7          	lui	x15,0xb9fb8
 1b4:	                               3ff78793          	addi	x15,x15,1023 # b9fb83ff <__global_pointer$+0xb7fb7bff>
 1b8:	                               08f52423          	sw	x15,136(x10)
     ###     graph[31] = 0x3c0003ff;
 1bc:	                               3c0007b7          	lui	x15,0x3c000
 1c0:	                               3ff78793          	addi	x15,x15,1023 # 3c0003ff <__global_pointer$+0x39fffbff>
 1c4:	                               08f52623          	sw	x15,140(x10)
     ###     
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx,visited);
 1c8:	                               00054783          	lbu	x15,0(x10)
     ###     graph[0] = 0x8c1503ff;
 1cc:	                               01050413          	addi	x8,x10,16
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx,visited);
 1d0:	                               00454483          	lbu	x9,4(x10)
 1d4:	                               0ff7f693          	andi	x13,x15,255
     ###     set_distance(&graph[start], 0x00);
 1d8:	                               00269713          	slli	x14,x13,0x2
 1dc:	                               00870733          	add	x14,x14,x8
     ###     *node_data = (*node_data & 0xFFFFFFE0) | (previous) ;
 1e0:	                               00072783          	lw	x15,0(x14)
     ###     for (int i = 0; i < V; ++i) visited[i] = 0;
 1e4:	                               02000613          	addi	x12,x0,32
 1e8:	                               00000593          	addi	x11,x0,0
     ###     *node_data = (*node_data & 0xFFFFFFE0) | (previous) ;
 1ec:	                               c007f793          	andi	x15,x15,-1024
 1f0:	                               00d7e7b3          	or	x15,x15,x13
 1f4:	                               00f72023          	sw	x15,0(x14)
     ###     for (int i = 0; i < V; ++i) visited[i] = 0;
 1f8:	                               0a050513          	addi	x10,x10,160
 1fc:	                               1dc000ef          	jal	x1,3d8 <memset>
     ###     dijkstra(graph, START_POINT, END_POINT, path_planned, &idx,visited);
 200:	                               0ff4f493          	andi	x9,x9,255
     ###     for (int i = 0; i < V; ++i) visited[i] = 0;
 204:	                               02000893          	addi	x17,x0,32
     ###          u = 32 ; 
 208:	                               02000313          	addi	x6,x0,32
     ###             if (visited[j] == 0 && (get_distance(graph[j]) < min_distance)) {
 20c:	                               02000537          	lui	x10,0x2000
     ###         if (u == end) break;
 210:	                               00048613          	addi	x12,x9,0
     ###         visited[u] = 1;
 214:	                               00100e13          	addi	x28,x0,1
     ###          u = 32 ; 
 218:	                     /-------> 02000593          	addi	x11,x0,32
     ###          min_distance = 32;
 21c:	                     |         02000693          	addi	x13,x0,32
     ###         for (int j = 0; j < V; ++j) {
 220:	                     |         00000793          	addi	x15,x0,0
     ###             if (visited[j] == 0 && (get_distance(graph[j]) < min_distance)) {
 224:	                     |  /----> 00f50733          	add	x14,x10,x15
 228:	                     |  |      0a074703          	lbu	x14,160(x14)
 22c:	                     |  |  /-- 02071263          	bne	x14,x0,250 <main+0x1fc>
 230:	                     |  |  |   00279713          	slli	x14,x15,0x2
 234:	                     |  |  |   00e50733          	add	x14,x10,x14
     ###     return (node_data>>5) & 0x1F ;
 238:	                     |  |  |   01072703          	lw	x14,16(x14)
 23c:	                     |  |  |   00575713          	srli	x14,x14,0x5
     ###             if (visited[j] == 0 && (get_distance(graph[j]) < min_distance)) {
 240:	                     |  |  |   01f77713          	andi	x14,x14,31
 244:	                     |  |  +-- 00d75663          	bge	x14,x13,250 <main+0x1fc>
 248:	                     |  |  |   00078593          	addi	x11,x15,0
 24c:	                     |  |  |   00070693          	addi	x13,x14,0
     ###         for (int j = 0; j < V; ++j) {
 250:	                     |  |  \-> 00178793          	addi	x15,x15,1
 254:	                     |  \----- fc6798e3          	bne	x15,x6,224 <main+0x1d0>
     ###         if (u == end) break;
 258:	                     |     /-- 02b48a63          	beq	x9,x11,28c <main+0x238>
     ###         visited[u] = 1;
 25c:	                     |     |   00b507b3          	add	x15,x10,x11
     ###         for (int k = 0; k < (get_neighborcount(graph[u])); ++k) {
 260:	                     |     |   00259f13          	slli	x30,x11,0x2
     ###         visited[u] = 1;
 264:	                     |     |   0bc78023          	sb	x28,160(x15)
     ###         for (int k = 0; k < (get_neighborcount(graph[u])); ++k) {
 268:	                     |     |   01e40f33          	add	x30,x8,x30
 26c:	                     |     |   01900f93          	addi	x31,x0,25
 270:	                     |     |   00000e93          	addi	x29,x0,0
 274:	            /--------|-----|-> 000f2783          	lw	x15,0(x30)
     ###     return (node_data >> (30)) + 1;  // Extract first 2 bits
 278:	            |        |     |   01e7d713          	srli	x14,x15,0x1e
     ###         for (int k = 0; k < (get_neighborcount(graph[u])); ++k) {
 27c:	            |        |     |   00170713          	addi	x14,x14,1
 280:	            |        |  /--|-- 06eec863          	blt	x29,x14,2f0 <path_planner.c.c3c0fb22+0x21>
     ###     for (int i = 0; i < V; ++i) {
 284:	            |        |  |  |   fff88893          	addi	x17,x17,-1
 288:	            |        \--|--|-- f80898e3          	bne	x17,x0,218 <main+0x1c4>
     ###         *path_len = 0;
 28c:	            |           |  \-> 00000713          	addi	x14,x0,0
     ###         for (int current = end; current < 32; current = get_previous(graph[current])) {
 290:	            |           |      01f00513          	addi	x10,x0,31
     ###             path[(*path_len)++] = current;
 294:	            |           |      020005b7          	lui	x11,0x2000
     ###         for (int current = end; current < 32; current = get_previous(graph[current])) {
 298:	   /--------|--------/--|----X 0ac55863          	bge	x10,x12,348 <path_planner.c.c3c0fb22+0x79>
 29c:	   |        |        |  |      00070793          	addi	x15,x14,0
 2a0:	   |        |  /-----|--|----> 02000737          	lui	x14,0x2000
     ###         for (int i = 0; i < *path_len / 2; ++i) {
 2a4:	   |        |  |     |  |      0017d613          	srli	x12,x15,0x1
 2a8:	   |        |  |     |  |      0ab70813          	addi	x16,x14,171 # 20000ab <__stack+0x6b>
 2ac:	   |        |  |     |  |      0aa70713          	addi	x14,x14,170
 2b0:	   |        |  |     |  |      0ff67613          	andi	x12,x12,255
 2b4:	   |        |  |     |  |      00000693          	addi	x13,x0,0
 2b8:	   |        |  |     |  |      00e78733          	add	x14,x15,x14
 2bc:	   |  /-----|--|--/--|--|----X 0ac6ce63          	blt	x13,x12,378 <path_planner.c.c3c0fb22+0xa9>
     ### 
     ###     for (int i = 0; i < idx; ++i) {
 2c0:	   |  |     |  |  |  |  |      00000713          	addi	x14,x0,0
     ###         NODE_POINT = path_planned[i];
 2c4:	   |  |     |  |  |  |  |      020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 2c8:	/--|--|--/--|--|--|--|--|----X 0cf74863          	blt	x14,x15,398 <path_planner.c.c3c0fb22+0xc9>
     ###     }
     ###     CPU_DONE = 1;
 2cc:	|  |  |  |  |  |  |  |  |      020007b7          	lui	x15,0x2000
 2d0:	|  |  |  |  |  |  |  |  |      00100713          	addi	x14,x0,1
 2d4:	|  |  |  |  |  |  |  |  |      00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 2d8:	|  |  |  |  |  |  |  |  |      00c12083          	lw	x1,12(x2)
 2dc:	|  |  |  |  |  |  |  |  |      00812403          	lw	x8,8(x2)
 2e0:	|  |  |  |  |  |  |  |  |      00412483          	lw	x9,4(x2)
 2e4:	|  |  |  |  |  |  |  |  |      00000513          	addi	x10,x0,0
 2e8:	|  |  |  |  |  |  |  |  |      01010113          	addi	x2,x2,16
 2ec:	|  |  |  |  |  |  |  |  |      00008067          	jalr	x0,0(x1)
     ###     return (node_data>>5) & 0x1F ;
 2f0:	|  |  |  |  |  |  |  |  \----> 0057d693          	srli	x13,x15,0x5
     ###     return (node_data >> (25 - 5 * index)) & 0x1F;  // Extract 5 bits for each neighbor
 2f4:	|  |  |  |  |  |  |  |         01f7d7b3          	srl	x15,x15,x31
     ###             if ( ((get_distance(graph[u]) + 1 )< get_distance(graph[neighbor])) && visited[neighbor]==0) {
 2f8:	|  |  |  |  |  |  |  |         01f7f793          	andi	x15,x15,31
 2fc:	|  |  |  |  |  |  |  |         00279813          	slli	x16,x15,0x2
 300:	|  |  |  |  |  |  |  |         01040833          	add	x16,x8,x16
 304:	|  |  |  |  |  |  |  |         00082703          	lw	x14,0(x16)
     ###     return (node_data>>5) & 0x1F ;
 308:	|  |  |  |  |  |  |  |         01f6f693          	andi	x13,x13,31
 30c:	|  |  |  |  |  |  |  |         00168693          	addi	x13,x13,1 # 2000001 <__bss_end+0x1>
 310:	|  |  |  |  |  |  |  |         00575293          	srli	x5,x14,0x5
     ###             if ( ((get_distance(graph[u]) + 1 )< get_distance(graph[neighbor])) && visited[neighbor]==0) {
 314:	|  |  |  |  |  |  |  |         01f2f293          	andi	x5,x5,31
 318:	|  |  |  |  |  |  |  |     /-- 0256f263          	bgeu	x13,x5,33c <path_planner.c.c3c0fb22+0x6d>
 31c:	|  |  |  |  |  |  |  |     |   00f507b3          	add	x15,x10,x15
 320:	|  |  |  |  |  |  |  |     |   0a07c783          	lbu	x15,160(x15)
 324:	|  |  |  |  |  |  |  |     +-- 00079c63          	bne	x15,x0,33c <path_planner.c.c3c0fb22+0x6d>
     ###     *node_data = (*node_data & 0xFFFFFC1F) | ((distance) << 5); // Mask and set distance
 328:	|  |  |  |  |  |  |  |     |   00569693          	slli	x13,x13,0x5
 32c:	|  |  |  |  |  |  |  |     |   c0077713          	andi	x14,x14,-1024
     ###     *node_data = (*node_data & 0xFFFFFFE0) | (previous) ;
 330:	|  |  |  |  |  |  |  |     |   00d76733          	or	x14,x14,x13
 334:	|  |  |  |  |  |  |  |     |   00b76733          	or	x14,x14,x11
 338:	|  |  |  |  |  |  |  |     |   00e82023          	sw	x14,0(x16)
     ###         for (int k = 0; k < (get_neighborcount(graph[u])); ++k) {
 33c:	|  |  |  |  |  |  |  |     \-> 001e8e93          	addi	x29,x29,1
 340:	|  |  |  |  |  |  |  |         ffbf8f93          	addi	x31,x31,-5
 344:	|  |  |  |  \--|--|--|-------- f31ff06f          	jal	x0,274 <main+0x220>
     ###             path[(*path_len)++] = current;
 348:	|  |  |  |     |  |  \-------> 00170793          	addi	x15,x14,1
 34c:	|  |  |  |     |  |            00e58733          	add	x14,x11,x14
 350:	|  |  |  |     |  |            0ac705a3          	sb	x12,171(x14)
     ###             if (current == get_previous(graph[current]))  break;
 354:	|  |  |  |     |  |            00261713          	slli	x14,x12,0x2
 358:	|  |  |  |     |  |            00e58733          	add	x14,x11,x14
     ###     return (node_data) & 0x1F;
 35c:	|  |  |  |     |  |            01072683          	lw	x13,16(x14)
     ###             path[(*path_len)++] = current;
 360:	|  |  |  |     |  |            0ff7f793          	andi	x15,x15,255
     ###             if (current == get_previous(graph[current]))  break;
 364:	|  |  |  |     |  |            01f6f693          	andi	x13,x13,31
 368:	|  |  |  |     \--|----------- f2d60ce3          	beq	x12,x13,2a0 <main+0x24c>
     ###             path[(*path_len)++] = current;
 36c:	|  |  |  |        |            00078713          	addi	x14,x15,0
     ###             if (current == get_previous(graph[current]))  break;
 370:	|  |  |  |        |            00068613          	addi	x12,x13,0
 374:	|  \--|--|--------|----------- f25ff06f          	jal	x0,298 <main+0x244>
 378:	|     |  |        \----------> 40d705b3          	sub	x11,x14,x13
 37c:	|     |  |                     01068533          	add	x10,x13,x16
     ###             path[i] = path[*path_len - 1 - i];
 380:	|     |  |                     0005c303          	lbu	x6,0(x11) # 2000000 <__bss_end>
     ###             uint8_t temp = path[i];
 384:	|     |  |                     00054883          	lbu	x17,0(x10) # 2000000 <__bss_end>
     ###         for (int i = 0; i < *path_len / 2; ++i) {
 388:	|     |  |                     00168693          	addi	x13,x13,1
     ###             path[i] = path[*path_len - 1 - i];
 38c:	|     |  |                     00650023          	sb	x6,0(x10)
     ###             path[*path_len - 1 - i] = temp;
 390:	|     |  |                     01158023          	sb	x17,0(x11)
 394:	|     \--|-------------------- f29ff06f          	jal	x0,2bc <main+0x268>
     ###         NODE_POINT = path_planned[i];
 398:	|        \-------------------> 00e68633          	add	x12,x13,x14
 39c:	|                              0ab64603          	lbu	x12,171(x12)
     ###     for (int i = 0; i < idx; ++i) {
 3a0:	|                              00170713          	addi	x14,x14,1
     ###         NODE_POINT = path_planned[i];
 3a4:	|                              00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 3a8:	\----------------------------- f21ff06f          	jal	x0,2c8 <main+0x274>

000003ac <_set_tls>:
 3ac:	00050213          	addi	x4,x10,0
 3b0:	00008067          	jalr	x0,0(x1)

000003b4 <memcpy>:
 3b4:	       00050313          	addi	x6,x10,0
 3b8:	/----- 00060e63          	beq	x12,x0,3d4 <memcpy+0x20>
 3bc:	|  /-> 00058383          	lb	x7,0(x11)
 3c0:	|  |   00730023          	sb	x7,0(x6)
 3c4:	|  |   fff60613          	addi	x12,x12,-1
 3c8:	|  |   00130313          	addi	x6,x6,1
 3cc:	|  |   00158593          	addi	x11,x11,1
 3d0:	|  \-- fe0616e3          	bne	x12,x0,3bc <memcpy+0x8>
 3d4:	\----> 00008067          	jalr	x0,0(x1)

000003d8 <memset>:
 3d8:	       00050313          	addi	x6,x10,0
 3dc:	/----- 00060a63          	beq	x12,x0,3f0 <memset+0x18>
 3e0:	|  /-> 00b30023          	sb	x11,0(x6)
 3e4:	|  |   fff60613          	addi	x12,x12,-1
 3e8:	|  |   00130313          	addi	x6,x6,1
 3ec:	|  \-- fe061ae3          	bne	x12,x0,3e0 <memset+0x8>
 3f0:	\----> 00008067          	jalr	x0,0(x1)

000003f4 <__text_end>:
 3f4:	0000                	c.unimp
	...
